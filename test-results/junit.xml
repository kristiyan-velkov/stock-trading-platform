<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="51" failures="0" errors="0" time="1.383">
  <testsuite name="StockLogo" errors="0" failures="0" skipped="0" timestamp="2025-05-20T21:54:16" time="0.415" tests="4">
    <testcase classname="StockLogo renders image with correct src" name="StockLogo renders image with correct src" time="0.019">
    </testcase>
    <testcase classname="StockLogo applies custom width and height" name="StockLogo applies custom width and height" time="0.003">
    </testcase>
    <testcase classname="StockLogo applies custom alt text" name="StockLogo applies custom alt text" time="0.002">
    </testcase>
    <testcase classname="StockLogo renders fallback image on error" name="StockLogo renders fallback image on error" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Button" errors="0" failures="0" skipped="0" timestamp="2025-05-20T21:54:17" time="0.128" tests="7">
    <testcase classname="Button renders with default variant and size" name="Button renders with default variant and size" time="0.023">
    </testcase>
    <testcase classname="Button applies destructive variant" name="Button applies destructive variant" time="0.006">
    </testcase>
    <testcase classname="Button applies icon size" name="Button applies icon size" time="0.003">
    </testcase>
    <testcase classname="Button merges custom className" name="Button merges custom className" time="0.004">
    </testcase>
    <testcase classname="Button renders as child component when asChild is true" name="Button renders as child component when asChild is true" time="0.004">
    </testcase>
    <testcase classname="Button passes through native props like disabled" name="Button passes through native props like disabled" time="0.003">
    </testcase>
    <testcase classname="Button forwards ref to button element" name="Button forwards ref to button element" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="LoadingFallback" errors="0" failures="0" skipped="0" timestamp="2025-05-20T21:54:17" time="0.102" tests="1">
    <testcase classname="LoadingFallback renders loading icon and text" name="LoadingFallback renders loading icon and text" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Input" errors="0" failures="0" skipped="0" timestamp="2025-05-20T21:54:17" time="0.093" tests="5">
    <testcase classname="Input renders an input field" name="Input renders an input field" time="0.011">
    </testcase>
    <testcase classname="Input applies the default classes" name="Input applies the default classes" time="0.002">
    </testcase>
    <testcase classname="Input merges custom className" name="Input merges custom className" time="0.002">
    </testcase>
    <testcase classname="Input accepts type and placeholder props" name="Input accepts type and placeholder props" time="0.001">
    </testcase>
    <testcase classname="Input forwards ref to input element" name="Input forwards ref to input element" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="HomePage" errors="0" failures="0" skipped="0" timestamp="2025-05-20T21:54:17" time="0.076" tests="1">
    <testcase classname="HomePage renders the StockDashboardWrapper inside Suspense" name="HomePage renders the StockDashboardWrapper inside Suspense" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="fetchStockData" errors="0" failures="0" skipped="0" timestamp="2025-05-20T21:54:17" time="0.036" tests="1">
    <testcase classname="fetchStockData fetches and returns formatted stock data" name="fetchStockData fetches and returns formatted stock data" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="WebSocketService" errors="0" failures="0" skipped="0" timestamp="2025-05-20T21:54:17" time="0.028" tests="5">
    <testcase classname="WebSocketService initializes worker and sends init message" name="WebSocketService initializes worker and sends init message" time="0.002">
    </testcase>
    <testcase classname="WebSocketService sends update_symbols message when already initialized" name="WebSocketService sends update_symbols message when already initialized" time="0">
    </testcase>
    <testcase classname="WebSocketService handles price_update message and updates stock" name="WebSocketService handles price_update message and updates stock" time="0.001">
    </testcase>
    <testcase classname="WebSocketService ignores update if symbol is not in the store" name="WebSocketService ignores update if symbol is not in the store" time="0">
    </testcase>
    <testcase classname="WebSocketService closes the worker correctly" name="WebSocketService closes the worker correctly" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Stock Store" errors="0" failures="0" skipped="0" timestamp="2025-05-20T21:54:17" time="0.027" tests="6">
    <testcase classname="Stock Store should set stocks and calculate portfolio value" name="Stock Store should set stocks and calculate portfolio value" time="0.001">
    </testcase>
    <testcase classname="Stock Store should set selected stock" name="Stock Store should set selected stock" time="0.001">
    </testcase>
    <testcase classname="Stock Store should update a stock" name="Stock Store should update a stock" time="0.001">
    </testcase>
    <testcase classname="Stock Store should update selected stock when it matches the updated stock" name="Stock Store should update selected stock when it matches the updated stock" time="0">
    </testcase>
    <testcase classname="Stock Store should not update selected stock when it does not match the updated stock" name="Stock Store should not update selected stock when it does not match the updated stock" time="0.001">
    </testcase>
    <testcase classname="Stock Store should handle NaN values when calculating portfolio value" name="Stock Store should handle NaN values when calculating portfolio value" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getStockName" errors="0" failures="0" skipped="0" timestamp="2025-05-20T21:54:17" time="0.022" tests="16">
    <testcase classname="getStockName returns mapped stock name" name="getStockName returns mapped stock name" time="0.001">
    </testcase>
    <testcase classname="getStockName returns symbol if name not mapped" name="getStockName returns symbol if name not mapped" time="0">
    </testcase>
    <testcase classname="generateMockChartData generates an array of correct length" name="generateMockChartData generates an array of correct length" time="0">
    </testcase>
    <testcase classname="generateMockChartData sets the last point to the current price" name="generateMockChartData sets the last point to the current price" time="0">
    </testcase>
    <testcase classname="getRandomChange returns a number within plausible ±5% range" name="getRandomChange returns a number within plausible ±5% range" time="0.001">
    </testcase>
    <testcase classname="getRandomShares returns a number between 0 and 20" name="getRandomShares returns a number between 0 and 20" time="0">
    </testcase>
    <testcase classname="getAveragePrice returns a number 80%-120% of price" name="getAveragePrice returns a number 80%-120% of price" time="0">
    </testcase>
    <testcase classname="formatCurrency formats a valid number to 2 decimal places" name="formatCurrency formats a valid number to 2 decimal places" time="0">
    </testcase>
    <testcase classname="formatCurrency returns &apos;0.00&apos; for NaN" name="formatCurrency returns &apos;0.00&apos; for NaN" time="0">
    </testcase>
    <testcase classname="formatPercentage formats percentage to positive string" name="formatPercentage formats percentage to positive string" time="0.001">
    </testcase>
    <testcase classname="formatPercentage returns &apos;0%&apos; for NaN" name="formatPercentage returns &apos;0%&apos; for NaN" time="0">
    </testcase>
    <testcase classname="sanitizeStock replaces NaN values with defaults" name="sanitizeStock replaces NaN values with defaults" time="0">
    </testcase>
    <testcase classname="sanitizeStock retains valid values" name="sanitizeStock retains valid values" time="0">
    </testcase>
    <testcase classname="safeParseFloat returns parsed float for valid input" name="safeParseFloat returns parsed float for valid input" time="0">
    </testcase>
    <testcase classname="safeParseFloat returns fallback for invalid input" name="safeParseFloat returns fallback for invalid input" time="0">
    </testcase>
    <testcase classname="safeParseFloat returns 0 fallback by default" name="safeParseFloat returns 0 fallback by default" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="cn" errors="0" failures="0" skipped="0" timestamp="2025-05-20T21:54:18" time="0.02" tests="5">
    <testcase classname="cn merges valid Tailwind classes" name="cn merges valid Tailwind classes" time="0.002">
    </testcase>
    <testcase classname="cn removes conflicting Tailwind classes using twMerge" name="cn removes conflicting Tailwind classes using twMerge" time="0">
    </testcase>
    <testcase classname="cn filters out falsy values" name="cn filters out falsy values" time="0">
    </testcase>
    <testcase classname="cn handles conditional expressions" name="cn handles conditional expressions" time="0">
    </testcase>
    <testcase classname="cn handles class arrays" name="cn handles class arrays" time="0">
    </testcase>
  </testsuite>
</testsuites>